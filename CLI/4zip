
#!/usr/bin/env python2.6

import gtk, gtk.glade, os, os.path
from lib import lz4file
from threading import Thread

Builder = gtk.Builder()

class Files_Compressor:


 def init_app (self):

    self.Current_Path = str()
    gtk.gdk.threads_init()

    "Initialise the application." 
    Builder.add_from_file ("gui/main.ui")

    Window = Builder.get_object("window1")
    Window.resize(640, 480)
    Window.set_position(gtk.WIN_POS_CENTER)
    Window.set_title("4zip")
    Window.show_all()

    self.Text_Path = Builder.get_object("entry1")

    Ext_arch_img = gtk.Image()
    pixbuf = gtk.gdk.pixbuf_new_from_file("gui/img/extract-archive.png")
    scaled_buf = pixbuf.scale_simple(20,20,gtk.gdk.INTERP_BILINEAR)
    Ext_arch_img.set_from_pixbuf(scaled_buf)

    Ext_Button = Builder.get_object("toolbutton10")
    Ext_Button.set_icon_widget(Ext_arch_img)
    Ext_arch_img.show()

    handlers = {
    "onDeleteWindow": gtk.main_quit,
    "onButtonExtracktPressed": self.Extrackt_To,
    "onButtonOpenPressed": self.Open_Archive,
    "onButtonCreatePressed": self.Create_Archive,
    "onButtonUpPressed": self.Up,
    "onButtonHomePressed": self.Home,
    "onButtonForwardPressed": self.Forward,
    "onButtonBeckPressed": self.Back
    }
    Builder.connect_signals(handlers)


 def xx(self, view, context, x, y, selection):
   treeselection = view.get_selection()
   model, iter = treeselection.get_selected()
   text = model.get_value(iter, 1)
   print text
   return

 # FILE_CHOOSER_ACTION_SAVE
 def Open_Archive(self, gaga):
  dialog = gtk.FileChooserDialog("Open..",
                               None,
                               gtk.FILE_CHOOSER_ACTION_OPEN,
                               (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                gtk.STOCK_OPEN, gtk.RESPONSE_OK))
  dialog.set_default_response(gtk.RESPONSE_OK)


  filter = gtk.FileFilter()
  filter.set_name("Archives")
  filter.add_pattern("*.lz4")
  filter.add_pattern("*.zip")
  filter.add_pattern("*.tar")
  dialog.add_filter(filter)

  filter = gtk.FileFilter()
  filter.set_name("All files")
  filter.add_pattern("*")
  dialog.add_filter(filter)

  response = dialog.run()
  if response == gtk.RESPONSE_OK:
      self.Archive_Data = lz4file.lz4o().Files_List(dialog.get_filename())
      self.OpenedFile = dialog.get_filename()
      self.MainPlace = Builder.get_object("vbox1")
      # create a TreeStore with one string column to use as the model

      self.All_Paths = []

      self.Text_Path.set_text("/")

      self.PathCount = len(self.Current_Path.split("/"))


      try:
        self.treestore.clear()
        self.Current_Path = ""
      except:

        self.Current_Path = ""
        self.treestore = gtk.TreeStore(gtk.gdk.Pixbuf, str)

        # create the TreeView using treestore
        self.treeview = gtk.TreeView(self.treestore)
        self.treeview.set_rules_hint(True)
        #self.treeview.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # create the TreeViewColumn to display the data
        self.tvcolumn = gtk.TreeViewColumn('Name')
        self.Sizecolumn = gtk.TreeViewColumn('Size')

        # add tvcolumn to treeview
        self.treeview.append_column(self.tvcolumn)
        self.treeview.append_column(self.Sizecolumn)

        # create a CellRendererText to render the data

        self.render_pixbuf = gtk.CellRendererPixbuf()
        self.tvcolumn.pack_start(self.render_pixbuf, expand=False)
        self.tvcolumn.add_attribute(self.render_pixbuf, 'pixbuf', 0)

        self.render_text = gtk.CellRendererText()
        self.tvcolumn.pack_start(self.render_text, True)
        self.tvcolumn.add_attribute(self.render_text, 'text', 1)

        # make it searchable
        self.treeview.set_search_column(1)

        # Allow sorting on the column
        self.tvcolumn.set_sort_column_id(1)

        # Allow drag and drop reordering of rows
        self.treeview.set_reorderable(True)

        TARGET_STRING = 0
        TARGET_ROOTWIN = 1
        DND_TARGETS = [
        ('STRING', 0, TARGET_STRING),
        ('text/plain', 0, TARGET_STRING),
        ]

        self.treeview.drag_source_set(gtk.gdk.BUTTON1_MASK, DND_TARGETS, gtk.gdk.ACTION_COPY | gtk.gdk.ACTION_MOVE)
        self.treeview.drag_dest_set(gtk.DEST_DEFAULT_ALL, DND_TARGETS[:-1], gtk.gdk.ACTION_COPY | gtk.gdk.ACTION_MOVE)
    
        #self.treeview.connect('drag_begin', self.on_drag_begin)
        self.treeview.connect('drag_data_get', self.xx)
        #self.treeview.connect('drag_data_received', self.on_drag_data_received)
        ##self.treeview.connect('drag_motion', self.xx)
        ##self.treeview.connect('drag_drop', self.xx)

        self.treeview.connect("row-activated", self.on_selection)

        # add to vbox
        self.Scroler = gtk.ScrolledWindow()
        #sb = self.Scroler.get_vscrollbar() 
        #sb.set_child_visible(False)
        self.Scroler.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC) # gtk.POLICY_NEVER, gtk.POLICY_ALWAYS
        self.Scroler.add(self.treeview)
        self.MainPlace.add(self.Scroler)
        self.Scroler.show()
        self.treeview.show()

        self.onetime = 0

      for parent in self.File_In_Path(self.Archive_Data):
          if self.Current_Path+parent in self.Archive_Data:
            icon = self.get_icon_pixbuf("STOCK_FILE")
          else:
            icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
          self.treestore.append(None, [icon, parent])
      self.All_Paths.append(self.Current_Path)
      self.All_Paths_Pos = 0
           
  elif response == gtk.RESPONSE_CANCEL:
      print 'Closed, no files selected'

  dialog.destroy()

 def on_drag_data_received(self, view, context, x, y, selection, info, time):
    if self.onetime == 1:
      self.onetime = 0
      return
    data_path = str(selection.data.replace("file://",""))
    data_path = data_path.replace("\r\n","")
    print data_path
    if os.path.isdir(data_path):
      icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
      self.treestore.append(None, [icon, os.path.basename(data_path)])
    elif os.path.isfile(data_path):
      icon = self.get_icon_pixbuf("STOCK_FILE")
      self.treestore.append(None, [icon, os.path.basename(data_path)])
    context.finish(True, False, time)
    if self.FirsFile == 0:
      self.t = Thread(target=lz4file.lz4o().Compress, args=(data_path, "", self.ArchiveName))
      self.t.start()
    self.onetime = 1
    self.FirsFile = 1
    #view.stop_emission('drag_data_received')

 def foreach(self,model, path, iter, selected):
    selected.append(self.Current_Path+model.get_value(iter, 1))
    
 def on_drag_begin(self, treeview, context):
    print 'drop'
    selected = []
    self.treeview.get_selection().selected_foreach(self.foreach, selected)
    print selected,"  **  ",self.OpenedFile
    print context.targets
    #for x in selected:
      #self.t = Thread(target=lz4file.lz4o().Decompress, args=(self.OpenedFile, "", x))
      #self.t.start()
      #lz4file.lz4o().Decompress(self.OpenedFile, "", x)

 def on_selection(self, widget, row, col):
  model = widget.get_model()
  if self.Current_Path+model[row][1] in self.Archive_Data:
    return
  self.Current_Path += model[row][1]+"/"
  self.Text_Path.set_text("/"+self.Current_Path)

  self.All_Paths.append(self.Current_Path)
  self.All_Paths_Pos += 1

  self.treestore.clear()

  for parent in self.File_In_Path(self.Archive_Data, self.Current_Path):
    if self.Current_Path+parent in self.Archive_Data:
      icon = self.get_icon_pixbuf("STOCK_FILE")
    else:
      icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
    self.treestore.append(None, [icon, parent])


 def File_In_Path(self, lst, path=""):
  if path != "" and path[len(path)-1:len(path)] != "/":
    path += "/"
  pos = len(path.split("/"))-1
  nlst = []
  for x in lst:
   try:
     xpos = x.split("/")[pos]
     if not xpos in nlst and x.find(path) != -1:
       nlst.append(xpos)
   except:
     pass
  return nlst

 def get_icon_pixbuf(self, stock):
  return self.treeview.render_icon(stock_id=getattr(gtk, stock),
                                size=gtk.ICON_SIZE_MENU,
                                detail=None)

 def Home(self, Zero):
  self.Current_Path = ""
  self.Text_Path.set_text("/")

  self.All_Paths.append(self.Current_Path)

  self.treestore.clear()

  for parent in self.File_In_Path(self.Archive_Data, self.Current_Path):
    if self.Current_Path+parent in self.Archive_Data:
      icon = self.get_icon_pixbuf("STOCK_FILE")
    else:
      icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
    self.treestore.append(None, [icon, parent])
  self.All_Paths_Pos += 1

 def Up(self, Zero):
  self.Current_Path = self.Current_Path.replace("/"+os.path.basename(self.Current_Path[0:len(self.Current_Path)-1]),"")
  self.Text_Path.set_text("/"+self.Current_Path)

  self.All_Paths.append(self.Current_Path)

  if self.PathCount == 2:
    self.Current_Path = ""
    self.Text_Path.set_text("/")
  self.PathCount = len(self.Current_Path.split("/"))

  self.treestore.clear()

  for parent in self.File_In_Path(self.Archive_Data, self.Current_Path):
    if self.Current_Path+parent in self.Archive_Data:
      icon = self.get_icon_pixbuf("STOCK_FILE")
    else:
      icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
    self.treestore.append(None, [icon, parent])
  self.All_Paths_Pos += 1

 def Back(self, Zero):
  if self.All_Paths_Pos == 0:
    return
  self.All_Paths_Pos -= 1
  self.Current_Path = self.All_Paths[self.All_Paths_Pos]
  self.Text_Path.set_text("/"+self.All_Paths[self.All_Paths_Pos])

  self.PathCount = len(self.Current_Path.split("/"))

  self.treestore.clear()

  for parent in self.File_In_Path(self.Archive_Data, self.Current_Path):
    if self.Current_Path+parent in self.Archive_Data:
      icon = self.get_icon_pixbuf("STOCK_FILE")
    else:
      icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
    self.treestore.append(None, [icon, parent])

 def Forward(self, Zero):
  if self.All_Paths_Pos == len(self.All_Paths)-1:
    return
  self.All_Paths_Pos += 1
  self.Current_Path = self.All_Paths[self.All_Paths_Pos]
  self.Text_Path.set_text("/"+self.All_Paths[self.All_Paths_Pos])

  self.PathCount = len(self.Current_Path.split("/"))

  self.treestore.clear()

  for parent in self.File_In_Path(self.Archive_Data, self.Current_Path):
    if self.Current_Path+parent in self.Archive_Data:
      icon = self.get_icon_pixbuf("STOCK_FILE")
    else:
      icon = self.get_icon_pixbuf("STOCK_DIRECTORY")
    self.treestore.append(None, [icon, parent])


 def Create_Archive(self, nonx):
  dialog = gtk.FileChooserDialog("Open..",
                               None,
                               gtk.FILE_CHOOSER_ACTION_SAVE,
                               (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                gtk.STOCK_SAVE, gtk.RESPONSE_OK))
  dialog.set_default_response(gtk.RESPONSE_OK)


  filter = gtk.FileFilter()
  filter.set_name("lz4 Archive")
  filter.add_pattern("*.lz4")
  dialog.add_filter(filter)

  filter = gtk.FileFilter()
  filter.set_name("Zip Archive")
  filter.add_pattern("*.zip")
  dialog.add_filter(filter)

  response = dialog.run()
  if response == gtk.RESPONSE_OK:
      print "create"
      self.ArchiveName = dialog.get_filename()
      if self.ArchiveName[len(self.ArchiveName)-4:len(self.ArchiveName)] != ".lz4":
        self.ArchiveName += ".lz4"
      print self.ArchiveName
      self.Archive_Data = lz4file.lz4o().Files_List(dialog.get_filename())
      self.MainPlace = Builder.get_object("vbox1")
      # create a TreeStore with one string column to use as the model

      self.All_Paths = []

      self.Text_Path.set_text("/")

      self.PathCount = len(self.Current_Path.split("/"))


      try:
        self.treestore.clear()
        self.Current_Path = ""
        self.FirsFile = 0
      except:

        self.Current_Path = ""
        self.treestore = gtk.TreeStore(gtk.gdk.Pixbuf, str)

        # create the TreeView using treestore
        self.treeview = gtk.TreeView(self.treestore)
        self.treeview.set_rules_hint(True)
        self.treeview.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # create the TreeViewColumn to display the data
        self.tvcolumn = gtk.TreeViewColumn('Name')
        self.Sizecolumn = gtk.TreeViewColumn('Size')

        # add tvcolumn to treeview
        self.treeview.append_column(self.tvcolumn)
        self.treeview.append_column(self.Sizecolumn)

        # create a CellRendererText to render the data

        self.render_pixbuf = gtk.CellRendererPixbuf()
        self.tvcolumn.pack_start(self.render_pixbuf, expand=False)
        self.tvcolumn.add_attribute(self.render_pixbuf, 'pixbuf', 0)

        self.render_text = gtk.CellRendererText()
        self.tvcolumn.pack_start(self.render_text, True)
        self.tvcolumn.add_attribute(self.render_text, 'text', 1)

        # make it searchable
        self.treeview.set_search_column(1)

        # Allow sorting on the column
        self.tvcolumn.set_sort_column_id(1)

        # Allow drag and drop reordering of rows
        self.treeview.set_reorderable(True)

        TARGET_STRING = 0
        TARGET_ROOTWIN = 1
        DND_TARGETS = [
        ('STRING', 0, TARGET_STRING),
        ('text/plain', 0, TARGET_STRING),
        ]

        self.treeview.drag_source_set(gtk.gdk.BUTTON1_MASK, DND_TARGETS, gtk.gdk.ACTION_COPY | gtk.gdk.ACTION_MOVE)
        self.treeview.drag_dest_set(gtk.DEST_DEFAULT_ALL, DND_TARGETS[:-1], gtk.gdk.ACTION_COPY | gtk.gdk.ACTION_MOVE)
    
        self.treeview.connect('drag_begin', self.on_drag_begin)
        #self.treeview.connect('drag_data_get', self.on_drag_data_get)
        self.treeview.connect('drag_data_received', self.on_drag_data_received)
        #self.treeview.connect('drag_motion', on_drag_motion)
        #self.treeview.connect('drag_drop', self.on_drag_drop)

        self.treeview.connect("row-activated", self.on_selection)

        # add to vbox
        self.Scroler = gtk.ScrolledWindow()
        #sb = self.Scroler.get_vscrollbar() 
        #sb.set_child_visible(False)
        self.Scroler.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC) # gtk.POLICY_NEVER, gtk.POLICY_ALWAYS
        self.Scroler.add(self.treeview)
        self.MainPlace.add(self.Scroler)
        self.Scroler.show()
        self.treeview.show()

        self.onetime = 0
        self.All_Paths_Pos = 0
        self.FirsFile = 0
      
  elif response == gtk.RESPONSE_CANCEL:
      print 'Closed, no files selected'
  dialog.destroy()

 def Extrackt_To(self,nonx):
  dialog = gtk.FileChooserDialog("Open..",
                               None,
                               gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER,
                               (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                gtk.STOCK_OPEN, gtk.RESPONSE_OK))
  dialog.set_default_response(gtk.RESPONSE_OK)


  response = dialog.run()
  if response == gtk.RESPONSE_OK:
      extract_to = dialog.get_filename()
      self.t = Thread(target=lz4file.lz4o().Decompress, args=(self.OpenedFile, extract_to))
      self.t.start()
      #lz4file.lz4o().Decompress(self.OpenedFile, extract_to,"a10")
  elif response == gtk.RESPONSE_CANCEL:
      print 'Closed, no files selected'
  dialog.destroy()


 def main (self):
    self.init_app ()
    gtk.main ()

if __name__ == '__main__': Files_Compressor().main ()
